#include <Arduino.h>
#include <TimeLib.h>
#include "pins.h"
#include <Wire.h>
#include <SerLCD.h> //Click here to get the library: http://librarymanager/All#SparkFun_SerLCD
#include "SparkFun_SHTC3.h"
#include "RTClib.h"

#define LED D4 //Define blinking LED pin

SerLCD lcd; // Initialize the library with default I2C address 0x72
SHTC3 mySHTC3;

void setupPins() {
  pinMode(FURNACE_HEAT_1_PIN, OUTPUT);
  pinMode(FURNACE_HEAT_2_PIN, OUTPUT);
  pinMode(FURNACE_AC_PIN, OUTPUT);
  pinMode(FURNACE_FAN_PIN, OUTPUT);
  //pinMode(PIR_DOUT_PIN, FUNCTION_3); // Switch it from a RX to GPIO pin
  //pinMode(PIR_DOUT_PIN, INPUT);
}

// make some custom characters:
byte lcdCharDegree[8] = {
  0b01100,
  0b10010,
  0b10010,
  0b01100,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};

void setup1() {
  // put your setup code here, to run once:
  Serial.begin(115200);		 // Start the Serial communication to send messages to the computer
  delay(100);

  //log("\nSetting up...");

  setupPins();
}

//unsigned long lastLoopRun = 0;
void loop1() {
  // put your main code here, to run repeatedly:
  //if(millis() - lastLoopRun > 15 * 1000) {
    Serial.println("Here we go");
    digitalWrite(FURNACE_HEAT_1_PIN, HIGH);
    delay(1000);
    digitalWrite(FURNACE_HEAT_2_PIN, HIGH);
    delay(1000);
    digitalWrite(FURNACE_AC_PIN, HIGH);
    delay(1000);
    digitalWrite(FURNACE_FAN_PIN, HIGH);

    delay(5000);

    digitalWrite(FURNACE_HEAT_1_PIN, LOW);
    digitalWrite(FURNACE_HEAT_2_PIN, LOW);
    digitalWrite(FURNACE_AC_PIN, LOW);
    digitalWrite(FURNACE_FAN_PIN, LOW);

    //lastLoopRun = millis();
  //}

  yield();

}

/*
  SerLCD Library - Hello World
  Gaston Williams - August 29, 2018

  This sketch prints "Hello World!" to the LCD
  and shows the time over I2C using the Qwiic system.

  The circuit:
   SparkFun RGB OpenLCD Serial display connected through
   a Sparkfun Qwiic adpater to an Ardruino with a
   Qwiic shield or a Sparkfun Blackboard with Qwiic built in.

  The Qwiic adapter should be attached to the display as follows:
  Display	/ Qwiic Cable Color
 	GND	/	Black
 	RAW	/	Red
 	SDA	/	Blue
 	SCL	/	Yellow

  Note: If you connect directly to a 5V Arduino instead, you *MUST* use
  a level-shifter to convert the i2c voltage levels down to 3.3V for the display.

  This code is based on the LiquidCrystal code originally by David A. Mellis
  and the OpenLCD code by Nathan Seidle at SparkFun.

  License: This example code is in the public domain.

  More info on Qwiic here: https://www.sparkfun.com/qwiic

  AVR-Based Serial Enabled LCDs Hookup Guide
  https://learn.sparkfun.com/tutorials/avr-based-serial-enabled-lcds-hookup-guide
*/

void setup2() {
  setup1();

  Wire.begin();

  lcd.begin(Wire); //Set up the LCD for I2C communication
  lcd.createChar(0, lcdCharDegree);
  lcd.setBacklight(255, 255, 255); //Set backlight to bright white
  lcd.setContrast(5); //Set contrast. Lower to 0 for higher contrast.

  lcd.clear(); //Clear the display - this moves the cursor to home position as well
  //lcd.print("Hello, World!");
  Serial.println("Cleared display");
  delay(3000);

  mySHTC3.begin();
}

void loop3() {
  for(int n = 0; n <= 255; n++) {
    lcd.clear();
    lcd.print(n);
    lcd.setContrast(n);
    delay(200);
  }
}
void loop2() {
  lcd.setBacklight(0, 0, 0); //black is off
  lcd.clear(); //Clear the display - this moves the cursor to home position as well
  lcd.print("Black (off)");
  delay(3000);

  lcd.setBacklight(255, 0, 0); //bright red
  lcd.clear();
  lcd.print("Red");
  delay(3000);

  lcd.setBacklight(0xFF8C00); //orange
  lcd.clear();
  lcd.print("Orange");
  delay(3000);

  lcd.setBacklight(255, 255, 0); //bright yellow
  lcd.clear();
  lcd.print("Yellow");
  delay(3000);

  lcd.setBacklight(0, 255, 0); //bright green
  lcd.clear();
  lcd.print("Green");
  delay(3000);

  lcd.setBacklight(0, 0, 255); //bright blue
  lcd.clear();
  lcd.print("Blue");
  delay(3000);

  lcd.setBacklight(0x4B0082); //indigo, a kind of dark purplish blue
  lcd.clear();
  lcd.print("Indigo");
  delay(3000);

  lcd.setBacklight(0xA020F0); //violet
  lcd.clear();
  lcd.print("Violet");
  delay(3000);

  lcd.setBacklight(0x808080); //grey
  lcd.clear();
  lcd.print("Grey");
  delay(3000);

  lcd.setBacklight(255, 255, 255); //bright white
  lcd.clear();
  lcd.print("White");
  delay(3000);
}

int lastMotionStatus = LOW;
void readDigitalValue()
{
  // // The OpenPIR's digital output is active high
  // int motionStatus = digitalRead(PIR_DOUT_PIN);
  // Serial.printf("Motion: %d\n", motionStatus);
  // if(motionStatus != lastMotionStatus) {
  //   if (motionStatus == HIGH) {
  //     //lcd.setCursor(15, 0);
  //     //lcd.print("X");
  //     //lcd.display();
  //     lcd.setFastBacklight(0x00FFFFFF);
  //   }
  //   else {
  //     //lcd.setCursor(15, 0);
  //     //lcd.print(" ");
  //     //lcd.noDisplay();
  //     lcd.setFastBacklight(0x00000000);
  //   }
  //   lastMotionStatus = motionStatus;
  // }
}

void run() {
  readDigitalValue();

  SHTC3_Status_TypeDef result = mySHTC3.update();
  if(result != SHTC3_Status_Nominal) {
    lcd.clear();
    lcd.print("Bad temp reading.");
    Serial.printf("Bad temp reading: %d.\n", (int) result);
    //delay(3000);
    return;
  }

  float humidity = mySHTC3.toPercent();
  float tempF = mySHTC3.toDegF();
  lcd.setCursor(0, 0);
  lcd.printf("%.0f", tempF);
  lcd.writeChar(0);
  lcd.print("F ");
  //lcd.setCursor(0, 1);
  lcd.printf("%.0f%%  ", humidity);

  lcd.setCursor(11, 0);
  lcd.print("H1F");

  lcd.setCursor(0, 1);
  time_t t = now();
  lcd.printf("%s %02d:%02d", dayShortStr(dayOfWeek(t)), hour(t), minute(t));

  lcd.setCursor(11, 1);
  lcd.printf("%02d-%02d", 72, 78);
}

unsigned long lastLoopRun = 0;
void loop4() {
  // put your main code here, to run repeatedly:
  if(millis() - lastLoopRun > 1 * 1000) {
    run();
    lastLoopRun = millis();
  }

  yield();

}


void setup()
{
  Serial.begin(115200);		 // Start the Serial communication to send messages to the computer
  delay(100);

  pinMode(D5, INPUT_PULLUP);

  Wire.begin();
  #if defined(WIRE_HAS_TIMEOUT)
    Wire.setWireTimeout(5000 /* us */, true /* reset_on_timeout */);
  #endif
  Wire.setClock(10000); // 10KHz, go slow

  //pinMode(LED, OUTPUT);
  //pinMode(D6, INPUT);

  //tone(D5, 19000);
}

int readProximity() {
  int baseSignal = 0;
  int sampleCount = 50;
  unsigned long usSamplePause = 500;

  digitalWrite(D5, LOW);
  for(int n = 0; n < sampleCount; n++) {
    baseSignal += analogRead(A0);
    delayMicroseconds(usSamplePause);
  }

  baseSignal = baseSignal / sampleCount;
  Serial.print("Base: "); Serial.print(baseSignal);

  int proxSignal = 0;
  digitalWrite(D5, HIGH);
  for(int n = 0; n < sampleCount; n++) {
    proxSignal += analogRead(A0);
    delayMicroseconds(usSamplePause);
  }
  digitalWrite(D5, LOW);

  proxSignal = proxSignal / sampleCount;
  Serial.print(" Detected: "); Serial.print(proxSignal);

  int proxValue = baseSignal - proxSignal;
  Serial.print(" Proximity: "); Serial.print(proxValue);
  Serial.print(" "); Serial.print((int) proxValue/baseSignal * 100);

  Serial.println();

  return proxValue;
}

bool checkPresence() {
  return HIGH == digitalRead(D5);
}
// int lastVal = -1;
// unsigned long startMs = 0;
// unsigned long tookMs = 0;
void loop() {

  Serial.print(millis());

  if(checkPresence()) {
    Serial.println(" I see something.");

    Wire.beginTransmission(9);
    Wire.write("Motion detected");
    int errorCode = Wire.endTransmission(false);
    if(errorCode != 0) {
      Serial.print("endTransmission error: "); Serial.println(errorCode);
    }
  }
  else {
    Serial.println(" ---- ");
  }

  delay(1000);
  // startMs = millis();
  // readProximity();
  // tookMs = millis() - startMs;
  // Serial.println(tookMs);
  // delay(1000);

  //Serial.println("On");

  //digitalWrite(D5, HIGH);
  //digitalWrite(LED, LOW);
  //delay(2000);

  //Serial.println("Off");
  //digitalWrite(D5, LOW);
  //digitalWrite(LED, HIGH);
  //delay(500);

  // Serial.print(millis());
  // Serial.println("\t On");
  // tone(D5, 38000, 2000);
  // Serial.print(millis());
  // Serial.println("\t Off");

  // int irVal = digitalRead(D6);
  // if(irVal != lastVal) {
  //   Serial.print(millis());
  //   Serial.print("\t");
  //   Serial.println(irVal);
  //   lastVal = irVal;
  // }

  //delay(100);
}

void loop_aread()
{
    Serial.print(millis());
    Serial.print("\t");

    int ledVal = analogRead(A0);
    Serial.println(ledVal);

    delay(500);                             // arbitrary delay to limit data to serial port
}

RTC_DS3231 rtc;

char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

void setupRtc () {
  Serial.begin(115200);
  delay(5000);

// #ifndef ESP8266
//   while (!Serial); // wait for serial port to connect. Needed for native USB
// #endif

  if (!rtc.begin()) {
    Serial.println("Couldn't find RTC");
    Serial.flush();
    while (1) delay(10);
  }

  if (rtc.lostPower()) {
    Serial.println("RTC lost power, let's set the time!");
    // When time needs to be set on a new device, or after a power loss, the
    // following line sets the RTC to the date & time this sketch was compiled
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
  }

  // When time needs to be re-set on a previously configured device, the
  // following line sets the RTC to the date & time this sketch was compiled
  // rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  // This line sets the RTC with an explicit date & time, for exampDS3231_SquareWave1Hz to set
  // January 21, 2014 at 3am you would call:
  // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));

  rtc.disable32K();
  rtc.writeSqwPinMode(DS3231_OFF);
}

void loopRtc () {
    DateTime now = rtc.now();

    Serial.print(now.year(), DEC);
    Serial.print('/');
    Serial.print(now.month(), DEC);
    Serial.print('/');
    Serial.print(now.day(), DEC);
    Serial.print(" (");
    Serial.print(daysOfTheWeek[now.dayOfTheWeek()]);
    Serial.print(") ");
    Serial.print(now.hour(), DEC);
    Serial.print(':');
    Serial.print(now.minute(), DEC);
    Serial.print(':');
    Serial.print(now.second(), DEC);
    Serial.println();

    // Serial.print(" since midnight 1/1/1970 = ");
    // Serial.print(now.unixtime());
    // Serial.print("s = ");
    // Serial.print(now.unixtime() / 86400L);
    // Serial.println("d");

    // // calculate a date which is 7 days, 12 hours, 30 minutes, 6 seconds into the future
    // DateTime future (now + TimeSpan(7,12,30,6));

    // Serial.print(" now + 7d + 12h + 30m + 6s: ");
    // Serial.print(future.year(), DEC);
    // Serial.print('/');
    // Serial.print(future.month(), DEC);
    // Serial.print('/');
    // Serial.print(future.day(), DEC);
    // Serial.print(' ');
    // Serial.print(future.hour(), DEC);
    // Serial.print(':');
    // Serial.print(future.minute(), DEC);
    // Serial.print(':');
    // Serial.print(future.second(), DEC);
    // Serial.println();

    Serial.print("Temperature: ");
    Serial.print(rtc.getTemperature());
    Serial.println(" C");

    Serial.println();
    delay(3000);
}

void setup_a() {
  Serial.begin(115200);
  delay(5000);
}

void loop_a() {
  int aval = analogRead(A0);
  Serial.println(aval);
  delay(500);
}


void setup_10() {
  pinMode(LED, OUTPUT); // Initialize the LED pin as an output
}
// the loop function runs over and over again forever
void loop_10() {
  digitalWrite(LED, LOW); // Turn the LED on (Note that LOW is the voltage level)
  delay(500); // Wait for a second
  digitalWrite(LED, HIGH); // Turn the LED off by making the voltage HIGH
  delay(500); // Wait for two seconds
}